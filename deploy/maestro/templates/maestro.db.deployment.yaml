{{- if not .Values.database.useExternalDB -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maestro-db
  namespace: '{{ .Values.global.namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      name: maestro-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: maestro-db
    spec:
      containers:
      - name: postgresql
        image: {{ .Values.global.imageOverrides.postgresImage }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        ports:
        - containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: maestro-db-config
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: maestro-db-config
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              key: name
              name: maestro-db-config
        - name: PGDATA
          value: "/var/lib/pgsql/data/pgdata"
        livenessProbe:
          initialDelaySeconds: 120
          tcpSocket:
            port: 5432
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - "/bin/sh"
            - "-c"
            - exec /usr/bin/pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost
              -p 5432
          initialDelaySeconds: 5
          timeoutSeconds: 1
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: "/dev/termination-log"
        volumeMounts:
        - mountPath: "/var/lib/pgsql/data"
          name: maestro-db-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: maestro-db-data
        persistentVolumeClaim:
          claimName: maestro-db-data
{{- end -}}
